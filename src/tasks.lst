ARM GAS  /tmp/cc38xw08.s 			page 1


   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"tasks.c"
  13              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.8.4 20140725 (release) [ARM/embedded-4_8-
  14              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I . -I ./inc
  17              	@ -iprefix /opt/gcc-arm-none-eabi-4_8-2014q3/bin/../lib/gcc/arm-none-eabi/4.8.4/
  18              	@ -isysroot /opt/gcc-arm-none-eabi-4_8-2014q3/bin/../arm-none-eabi
  19              	@ -MD src/tasks.d -MF .dep/tasks.o.d -MP -MQ src/tasks.o
  20              	@ -D__USES_INITFINI__ -D DEBUG=1 src/tasks.c -mcpu=arm7tdmi -marm
  21              	@ -auxbase-strip src/tasks.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  22              	@ -fomit-frame-pointer -fverbose-asm
  23              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  24              	@ -fbranch-count-reg -fcommon -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  25              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse -fgcse-lm
  26              	@ -fgnu-runtime -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  27              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  28              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  29              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  30              	@ -fpeephole -fprefetch-loop-arrays -freg-struct-return
  31              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  32              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  33              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  34              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  35              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -fsync-libcalls
  36              	@ -ftrapping-math -ftree-coalesce-vars -ftree-cselim -ftree-forwprop
  37              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  38              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pta
  39              	@ -ftree-reassoc -ftree-scev-cprop -ftree-slp-vectorize
  40              	@ -ftree-vect-loop-version -funit-at-a-time -fverbose-asm
  41              	@ -fzero-initialized-in-bss -marm -mlittle-endian
  42              	@ -mpic-data-is-text-relative -msched-prolog -mthumb-interwork
  43              	@ -mvectorize-with-neon-quad
  44              	
  45              		.text
  46              	.Ltext0:
  47              		.cfi_sections	.debug_frame
  48              		.section	.rodata
  49              		.align	2
  50              	.LC0:
  51 0000 48656C6C 		.ascii	"Hello world!\012\000"
  51      6F20776F 
  51      726C6421 
  51      0A00
  52              		.text
  53              		.align	2
  54              		.global	hello_world
ARM GAS  /tmp/cc38xw08.s 			page 2


  55              		.type	hello_world, %function
  56              	hello_world:
  57              	.LFB0:
  58              		.file 1 "src/tasks.c"
   1:src/tasks.c   **** #include "lpc2378.h"
   2:src/tasks.c   **** #include "print.h"
   3:src/tasks.c   **** #include "critical_section.h"
   4:src/tasks.c   **** 
   5:src/tasks.c   **** //
   6:src/tasks.c   **** // hello_world with timer reset
   7:src/tasks.c   **** //
   8:src/tasks.c   **** void hello_world(void)
   9:src/tasks.c   **** {
  59              		.loc 1 9 0
  60              		.cfi_startproc
  61              		@ Function supports interworking.
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64 0000 08402DE9 		stmfd	sp!, {r3, lr}	@,
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 3, -8
  68              		.cfi_offset 14, -4
  10:src/tasks.c   **** 	WRITEREG32(T0IR, 0xFF);         // Reset timer
  69              		.loc 1 10 0
  70 0004 14309FE5 		ldr	r3, .L2	@ D.4646,
  71 0008 FF20A0E3 		mov	r2, #255	@ tmp111,
  72 000c 002083E5 		str	r2, [r3]	@ tmp111, *_1
  11:src/tasks.c   **** 	printString("Hello world!\n");
  73              		.loc 1 11 0
  74 0010 0C009FE5 		ldr	r0, .L2+4	@,
  75 0014 FEFFFFEB 		bl	printString	@
  12:src/tasks.c   **** }
  76              		.loc 1 12 0
  77 0018 0840BDE8 		ldmfd	sp!, {r3, lr}	@
  78 001c 1EFF2FE1 		bx	lr	@
  79              	.L3:
  80              		.align	2
  81              	.L2:
  82 0020 004000E0 		.word	-536854528
  83 0024 00000000 		.word	.LC0
  84              		.cfi_endproc
  85              	.LFE0:
  86              		.size	hello_world, .-hello_world
  87              		.section	.rodata
  88 000e 0000     		.align	2
  89              	.LC1:
  90 0010 7461736B 		.ascii	"task one: \000"
  90      206F6E65 
  90      3A2000
  91 001b 00       		.align	2
  92              	.LC2:
  93 001c 0A00     		.ascii	"\012\000"
  94              		.text
  95              		.align	2
  96              		.global	taskOne
  97              		.type	taskOne, %function
ARM GAS  /tmp/cc38xw08.s 			page 3


  98              	taskOne:
  99              	.LFB1:
  13:src/tasks.c   **** 
  14:src/tasks.c   **** //
  15:src/tasks.c   **** // taskOne counts up from 0.
  16:src/tasks.c   **** // Never exits.
  17:src/tasks.c   **** //
  18:src/tasks.c   **** void taskOne(CriticalSection_t cs)
  19:src/tasks.c   **** {
 100              		.loc 1 19 0
 101              		.cfi_startproc
 102              		@ Function supports interworking.
 103              		@ args = 0, pretend = 0, frame = 16
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0028 04E02DE5 		str	lr, [sp, #-4]!	@,
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 4
 108              		.cfi_offset 14, -4
 109 002c 14D04DE2 		sub	sp, sp, #20	@,,
 110              	.LCFI2:
 111              		.cfi_def_cfa_offset 24
 112 0030 04008DE5 		str	r0, [sp, #4]	@ cs, cs
  20:src/tasks.c   **** 	int count = 0;
 113              		.loc 1 20 0
 114 0034 0030A0E3 		mov	r3, #0	@ tmp112,
 115 0038 0C308DE5 		str	r3, [sp, #12]	@ tmp112, count
 116              	.L7:
 117              	.LBB2:
  21:src/tasks.c   **** 	while(1)
  22:src/tasks.c   **** 	{
  23:src/tasks.c   ****         EnterCriticalSection(cs);
 118              		.loc 1 23 0
 119 003c 04009DE5 		ldr	r0, [sp, #4]	@, cs
 120 0040 FEFFFFEB 		bl	EnterCriticalSection	@
  24:src/tasks.c   **** 		printString("task one: ");
 121              		.loc 1 24 0
 122 0044 50009FE5 		ldr	r0, .L8	@,
 123 0048 FEFFFFEB 		bl	printString	@
  25:src/tasks.c   **** 		print_uint32(count++);
 124              		.loc 1 25 0
 125 004c 0C309DE5 		ldr	r3, [sp, #12]	@ count.0, count
 126 0050 012083E2 		add	r2, r3, #1	@ tmp113, count.0,
 127 0054 0C208DE5 		str	r2, [sp, #12]	@ tmp113, count
 128 0058 0300A0E1 		mov	r0, r3	@, count.1
 129 005c FEFFFFEB 		bl	print_uint32	@
  26:src/tasks.c   **** 		printString("\n");
 130              		.loc 1 26 0
 131 0060 38009FE5 		ldr	r0, .L8+4	@,
 132 0064 FEFFFFEB 		bl	printString	@
  27:src/tasks.c   **** 		int i;
  28:src/tasks.c   **** 		for(i=0;i<10000;i++);    // delay
 133              		.loc 1 28 0
 134 0068 0030A0E3 		mov	r3, #0	@ tmp114,
 135 006c 08308DE5 		str	r3, [sp, #8]	@ tmp114, i
 136 0070 020000EA 		b	.L5	@
 137              	.L6:
 138              		.loc 1 28 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cc38xw08.s 			page 4


 139 0074 08309DE5 		ldr	r3, [sp, #8]	@ tmp116, i
 140 0078 013083E2 		add	r3, r3, #1	@ tmp115, tmp116,
 141 007c 08308DE5 		str	r3, [sp, #8]	@ tmp115, i
 142              	.L5:
 143              		.loc 1 28 0 discriminator 1
 144 0080 08209DE5 		ldr	r2, [sp, #8]	@ tmp117, i
 145 0084 18309FE5 		ldr	r3, .L8+8	@ tmp118,
 146 0088 030052E1 		cmp	r2, r3	@ tmp117, tmp118
 147 008c F8FFFFDA 		ble	.L6	@,
  29:src/tasks.c   ****         LeaveCriticalSection(cs);
 148              		.loc 1 29 0 is_stmt 1
 149 0090 04009DE5 		ldr	r0, [sp, #4]	@, cs
 150 0094 FEFFFFEB 		bl	LeaveCriticalSection	@
 151              	.LBE2:
  30:src/tasks.c   **** 	}
 152              		.loc 1 30 0
 153 0098 E7FFFFEA 		b	.L7	@
 154              	.L9:
 155              		.align	2
 156              	.L8:
 157 009c 10000000 		.word	.LC1
 158 00a0 1C000000 		.word	.LC2
 159 00a4 0F270000 		.word	9999
 160              		.cfi_endproc
 161              	.LFE1:
 162              		.size	taskOne, .-taskOne
 163              		.section	.rodata
 164 001e 0000     		.align	2
 165              	.LC3:
 166 0020 7461736B 		.ascii	"task two: \000"
 166      2074776F 
 166      3A2000
 167 002b 00       		.text
 168              		.align	2
 169              		.global	taskTwo
 170              		.type	taskTwo, %function
 171              	taskTwo:
 172              	.LFB2:
  31:src/tasks.c   **** }
  32:src/tasks.c   **** 
  33:src/tasks.c   **** //
  34:src/tasks.c   **** // taskTwo counts down from 0xFFFFFFFF
  35:src/tasks.c   **** // Never exits.
  36:src/tasks.c   **** //
  37:src/tasks.c   **** void taskTwo(CriticalSection_t cs)
  38:src/tasks.c   **** {
 173              		.loc 1 38 0
 174              		.cfi_startproc
 175              		@ Function supports interworking.
 176              		@ args = 0, pretend = 0, frame = 16
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 00a8 04E02DE5 		str	lr, [sp, #-4]!	@,
 179              	.LCFI3:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 14, -4
 182 00ac 14D04DE2 		sub	sp, sp, #20	@,,
 183              	.LCFI4:
ARM GAS  /tmp/cc38xw08.s 			page 5


 184              		.cfi_def_cfa_offset 24
 185 00b0 04008DE5 		str	r0, [sp, #4]	@ cs, cs
  39:src/tasks.c   **** 	int count = 0xFFFFFFFF;
 186              		.loc 1 39 0
 187 00b4 0030E0E3 		mvn	r3, #0	@ tmp112,
 188 00b8 0C308DE5 		str	r3, [sp, #12]	@ tmp112, count
 189              	.L13:
 190              	.LBB3:
  40:src/tasks.c   **** 	while(1)
  41:src/tasks.c   **** 	{
  42:src/tasks.c   ****         EnterCriticalSection(cs);
 191              		.loc 1 42 0
 192 00bc 04009DE5 		ldr	r0, [sp, #4]	@, cs
 193 00c0 FEFFFFEB 		bl	EnterCriticalSection	@
  43:src/tasks.c   **** 		printString("task two: ");
 194              		.loc 1 43 0
 195 00c4 50009FE5 		ldr	r0, .L14	@,
 196 00c8 FEFFFFEB 		bl	printString	@
  44:src/tasks.c   **** 		print_uint32(count--);
 197              		.loc 1 44 0
 198 00cc 0C309DE5 		ldr	r3, [sp, #12]	@ count.2, count
 199 00d0 012043E2 		sub	r2, r3, #1	@ tmp113, count.2,
 200 00d4 0C208DE5 		str	r2, [sp, #12]	@ tmp113, count
 201 00d8 0300A0E1 		mov	r0, r3	@, count.3
 202 00dc FEFFFFEB 		bl	print_uint32	@
  45:src/tasks.c   **** 		printString("\n");
 203              		.loc 1 45 0
 204 00e0 38009FE5 		ldr	r0, .L14+4	@,
 205 00e4 FEFFFFEB 		bl	printString	@
  46:src/tasks.c   **** 		int i;
  47:src/tasks.c   **** 		for(i=0;i<10000;i++);    // delay
 206              		.loc 1 47 0
 207 00e8 0030A0E3 		mov	r3, #0	@ tmp114,
 208 00ec 08308DE5 		str	r3, [sp, #8]	@ tmp114, i
 209 00f0 020000EA 		b	.L11	@
 210              	.L12:
 211              		.loc 1 47 0 is_stmt 0 discriminator 2
 212 00f4 08309DE5 		ldr	r3, [sp, #8]	@ tmp116, i
 213 00f8 013083E2 		add	r3, r3, #1	@ tmp115, tmp116,
 214 00fc 08308DE5 		str	r3, [sp, #8]	@ tmp115, i
 215              	.L11:
 216              		.loc 1 47 0 discriminator 1
 217 0100 08209DE5 		ldr	r2, [sp, #8]	@ tmp117, i
 218 0104 18309FE5 		ldr	r3, .L14+8	@ tmp118,
 219 0108 030052E1 		cmp	r2, r3	@ tmp117, tmp118
 220 010c F8FFFFDA 		ble	.L12	@,
  48:src/tasks.c   ****         LeaveCriticalSection(cs);
 221              		.loc 1 48 0 is_stmt 1
 222 0110 04009DE5 		ldr	r0, [sp, #4]	@, cs
 223 0114 FEFFFFEB 		bl	LeaveCriticalSection	@
 224              	.LBE3:
  49:src/tasks.c   **** 	}
 225              		.loc 1 49 0
 226 0118 E7FFFFEA 		b	.L13	@
 227              	.L15:
 228              		.align	2
 229              	.L14:
ARM GAS  /tmp/cc38xw08.s 			page 6


 230 011c 20000000 		.word	.LC3
 231 0120 1C000000 		.word	.LC2
 232 0124 0F270000 		.word	9999
 233              		.cfi_endproc
 234              	.LFE2:
 235              		.size	taskTwo, .-taskTwo
 236              	.Letext0:
 237              		.file 2 "./inc/critical_section.h"
 238              		.section	.debug_info,"",%progbits
 239              	.Ldebug_info0:
 240 0000 F3000000 		.4byte	0xf3
 241 0004 0200     		.2byte	0x2
 242 0006 00000000 		.4byte	.Ldebug_abbrev0
 243 000a 04       		.byte	0x4
 244 000b 01       		.uleb128 0x1
 245 000c 8B000000 		.4byte	.LASF4
 246 0010 01       		.byte	0x1
 247 0011 0C010000 		.4byte	.LASF5
 248 0015 00000000 		.4byte	.LASF6
 249 0019 00000000 		.4byte	.Ltext0
 250 001d 28010000 		.4byte	.Letext0
 251 0021 00000000 		.4byte	.Ldebug_line0
 252 0025 02       		.uleb128 0x2
 253 0026 04       		.byte	0x4
 254 0027 07       		.byte	0x7
 255 0028 30000000 		.4byte	.LASF0
 256 002c 03       		.uleb128 0x3
 257 002d 04       		.byte	0x4
 258 002e 05       		.byte	0x5
 259 002f 696E7400 		.ascii	"int\000"
 260 0033 02       		.uleb128 0x2
 261 0034 01       		.byte	0x1
 262 0035 08       		.byte	0x8
 263 0036 65000000 		.4byte	.LASF1
 264 003a 02       		.uleb128 0x2
 265 003b 02       		.byte	0x2
 266 003c 07       		.byte	0x7
 267 003d 42000000 		.4byte	.LASF2
 268 0041 04       		.uleb128 0x4
 269 0042 79000000 		.4byte	.LASF7
 270 0046 02       		.byte	0x2
 271 0047 0A       		.byte	0xa
 272 0048 2C000000 		.4byte	0x2c
 273 004c 05       		.uleb128 0x5
 274 004d 01       		.byte	0x1
 275 004e 24000000 		.4byte	.LASF8
 276 0052 01       		.byte	0x1
 277 0053 08       		.byte	0x8
 278 0054 01       		.byte	0x1
 279 0055 00000000 		.4byte	.LFB0
 280 0059 28000000 		.4byte	.LFE0
 281 005d 00000000 		.4byte	.LLST0
 282 0061 01       		.byte	0x1
 283 0062 06       		.uleb128 0x6
 284 0063 01       		.byte	0x1
 285 0064 5D000000 		.4byte	.LASF9
 286 0068 01       		.byte	0x1
ARM GAS  /tmp/cc38xw08.s 			page 7


 287 0069 12       		.byte	0x12
 288 006a 01       		.byte	0x1
 289 006b 28000000 		.4byte	.LFB1
 290 006f A8000000 		.4byte	.LFE1
 291 0073 20000000 		.4byte	.LLST1
 292 0077 01       		.byte	0x1
 293 0078 AE000000 		.4byte	0xae
 294 007c 07       		.uleb128 0x7
 295 007d 637300   		.ascii	"cs\000"
 296 0080 01       		.byte	0x1
 297 0081 12       		.byte	0x12
 298 0082 41000000 		.4byte	0x41
 299 0086 02       		.byte	0x2
 300 0087 91       		.byte	0x91
 301 0088 6C       		.sleb128 -20
 302 0089 08       		.uleb128 0x8
 303 008a 73000000 		.4byte	.LASF3
 304 008e 01       		.byte	0x1
 305 008f 14       		.byte	0x14
 306 0090 2C000000 		.4byte	0x2c
 307 0094 02       		.byte	0x2
 308 0095 91       		.byte	0x91
 309 0096 74       		.sleb128 -12
 310 0097 09       		.uleb128 0x9
 311 0098 3C000000 		.4byte	.LBB2
 312 009c 98000000 		.4byte	.LBE2
 313 00a0 0A       		.uleb128 0xa
 314 00a1 6900     		.ascii	"i\000"
 315 00a3 01       		.byte	0x1
 316 00a4 1B       		.byte	0x1b
 317 00a5 2C000000 		.4byte	0x2c
 318 00a9 02       		.byte	0x2
 319 00aa 91       		.byte	0x91
 320 00ab 70       		.sleb128 -16
 321 00ac 00       		.byte	0
 322 00ad 00       		.byte	0
 323 00ae 0B       		.uleb128 0xb
 324 00af 01       		.byte	0x1
 325 00b0 55000000 		.4byte	.LASF10
 326 00b4 01       		.byte	0x1
 327 00b5 25       		.byte	0x25
 328 00b6 01       		.byte	0x1
 329 00b7 A8000000 		.4byte	.LFB2
 330 00bb 28010000 		.4byte	.LFE2
 331 00bf 4C000000 		.4byte	.LLST2
 332 00c3 01       		.byte	0x1
 333 00c4 07       		.uleb128 0x7
 334 00c5 637300   		.ascii	"cs\000"
 335 00c8 01       		.byte	0x1
 336 00c9 25       		.byte	0x25
 337 00ca 41000000 		.4byte	0x41
 338 00ce 02       		.byte	0x2
 339 00cf 91       		.byte	0x91
 340 00d0 6C       		.sleb128 -20
 341 00d1 08       		.uleb128 0x8
 342 00d2 73000000 		.4byte	.LASF3
 343 00d6 01       		.byte	0x1
ARM GAS  /tmp/cc38xw08.s 			page 8


 344 00d7 27       		.byte	0x27
 345 00d8 2C000000 		.4byte	0x2c
 346 00dc 02       		.byte	0x2
 347 00dd 91       		.byte	0x91
 348 00de 74       		.sleb128 -12
 349 00df 09       		.uleb128 0x9
 350 00e0 BC000000 		.4byte	.LBB3
 351 00e4 18010000 		.4byte	.LBE3
 352 00e8 0A       		.uleb128 0xa
 353 00e9 6900     		.ascii	"i\000"
 354 00eb 01       		.byte	0x1
 355 00ec 2E       		.byte	0x2e
 356 00ed 2C000000 		.4byte	0x2c
 357 00f1 02       		.byte	0x2
 358 00f2 91       		.byte	0x91
 359 00f3 70       		.sleb128 -16
 360 00f4 00       		.byte	0
 361 00f5 00       		.byte	0
 362 00f6 00       		.byte	0
 363              		.section	.debug_abbrev,"",%progbits
 364              	.Ldebug_abbrev0:
 365 0000 01       		.uleb128 0x1
 366 0001 11       		.uleb128 0x11
 367 0002 01       		.byte	0x1
 368 0003 25       		.uleb128 0x25
 369 0004 0E       		.uleb128 0xe
 370 0005 13       		.uleb128 0x13
 371 0006 0B       		.uleb128 0xb
 372 0007 03       		.uleb128 0x3
 373 0008 0E       		.uleb128 0xe
 374 0009 1B       		.uleb128 0x1b
 375 000a 0E       		.uleb128 0xe
 376 000b 11       		.uleb128 0x11
 377 000c 01       		.uleb128 0x1
 378 000d 12       		.uleb128 0x12
 379 000e 01       		.uleb128 0x1
 380 000f 10       		.uleb128 0x10
 381 0010 06       		.uleb128 0x6
 382 0011 00       		.byte	0
 383 0012 00       		.byte	0
 384 0013 02       		.uleb128 0x2
 385 0014 24       		.uleb128 0x24
 386 0015 00       		.byte	0
 387 0016 0B       		.uleb128 0xb
 388 0017 0B       		.uleb128 0xb
 389 0018 3E       		.uleb128 0x3e
 390 0019 0B       		.uleb128 0xb
 391 001a 03       		.uleb128 0x3
 392 001b 0E       		.uleb128 0xe
 393 001c 00       		.byte	0
 394 001d 00       		.byte	0
 395 001e 03       		.uleb128 0x3
 396 001f 24       		.uleb128 0x24
 397 0020 00       		.byte	0
 398 0021 0B       		.uleb128 0xb
 399 0022 0B       		.uleb128 0xb
 400 0023 3E       		.uleb128 0x3e
ARM GAS  /tmp/cc38xw08.s 			page 9


 401 0024 0B       		.uleb128 0xb
 402 0025 03       		.uleb128 0x3
 403 0026 08       		.uleb128 0x8
 404 0027 00       		.byte	0
 405 0028 00       		.byte	0
 406 0029 04       		.uleb128 0x4
 407 002a 16       		.uleb128 0x16
 408 002b 00       		.byte	0
 409 002c 03       		.uleb128 0x3
 410 002d 0E       		.uleb128 0xe
 411 002e 3A       		.uleb128 0x3a
 412 002f 0B       		.uleb128 0xb
 413 0030 3B       		.uleb128 0x3b
 414 0031 0B       		.uleb128 0xb
 415 0032 49       		.uleb128 0x49
 416 0033 13       		.uleb128 0x13
 417 0034 00       		.byte	0
 418 0035 00       		.byte	0
 419 0036 05       		.uleb128 0x5
 420 0037 2E       		.uleb128 0x2e
 421 0038 00       		.byte	0
 422 0039 3F       		.uleb128 0x3f
 423 003a 0C       		.uleb128 0xc
 424 003b 03       		.uleb128 0x3
 425 003c 0E       		.uleb128 0xe
 426 003d 3A       		.uleb128 0x3a
 427 003e 0B       		.uleb128 0xb
 428 003f 3B       		.uleb128 0x3b
 429 0040 0B       		.uleb128 0xb
 430 0041 27       		.uleb128 0x27
 431 0042 0C       		.uleb128 0xc
 432 0043 11       		.uleb128 0x11
 433 0044 01       		.uleb128 0x1
 434 0045 12       		.uleb128 0x12
 435 0046 01       		.uleb128 0x1
 436 0047 40       		.uleb128 0x40
 437 0048 06       		.uleb128 0x6
 438 0049 9642     		.uleb128 0x2116
 439 004b 0C       		.uleb128 0xc
 440 004c 00       		.byte	0
 441 004d 00       		.byte	0
 442 004e 06       		.uleb128 0x6
 443 004f 2E       		.uleb128 0x2e
 444 0050 01       		.byte	0x1
 445 0051 3F       		.uleb128 0x3f
 446 0052 0C       		.uleb128 0xc
 447 0053 03       		.uleb128 0x3
 448 0054 0E       		.uleb128 0xe
 449 0055 3A       		.uleb128 0x3a
 450 0056 0B       		.uleb128 0xb
 451 0057 3B       		.uleb128 0x3b
 452 0058 0B       		.uleb128 0xb
 453 0059 27       		.uleb128 0x27
 454 005a 0C       		.uleb128 0xc
 455 005b 11       		.uleb128 0x11
 456 005c 01       		.uleb128 0x1
 457 005d 12       		.uleb128 0x12
ARM GAS  /tmp/cc38xw08.s 			page 10


 458 005e 01       		.uleb128 0x1
 459 005f 40       		.uleb128 0x40
 460 0060 06       		.uleb128 0x6
 461 0061 9642     		.uleb128 0x2116
 462 0063 0C       		.uleb128 0xc
 463 0064 01       		.uleb128 0x1
 464 0065 13       		.uleb128 0x13
 465 0066 00       		.byte	0
 466 0067 00       		.byte	0
 467 0068 07       		.uleb128 0x7
 468 0069 05       		.uleb128 0x5
 469 006a 00       		.byte	0
 470 006b 03       		.uleb128 0x3
 471 006c 08       		.uleb128 0x8
 472 006d 3A       		.uleb128 0x3a
 473 006e 0B       		.uleb128 0xb
 474 006f 3B       		.uleb128 0x3b
 475 0070 0B       		.uleb128 0xb
 476 0071 49       		.uleb128 0x49
 477 0072 13       		.uleb128 0x13
 478 0073 02       		.uleb128 0x2
 479 0074 0A       		.uleb128 0xa
 480 0075 00       		.byte	0
 481 0076 00       		.byte	0
 482 0077 08       		.uleb128 0x8
 483 0078 34       		.uleb128 0x34
 484 0079 00       		.byte	0
 485 007a 03       		.uleb128 0x3
 486 007b 0E       		.uleb128 0xe
 487 007c 3A       		.uleb128 0x3a
 488 007d 0B       		.uleb128 0xb
 489 007e 3B       		.uleb128 0x3b
 490 007f 0B       		.uleb128 0xb
 491 0080 49       		.uleb128 0x49
 492 0081 13       		.uleb128 0x13
 493 0082 02       		.uleb128 0x2
 494 0083 0A       		.uleb128 0xa
 495 0084 00       		.byte	0
 496 0085 00       		.byte	0
 497 0086 09       		.uleb128 0x9
 498 0087 0B       		.uleb128 0xb
 499 0088 01       		.byte	0x1
 500 0089 11       		.uleb128 0x11
 501 008a 01       		.uleb128 0x1
 502 008b 12       		.uleb128 0x12
 503 008c 01       		.uleb128 0x1
 504 008d 00       		.byte	0
 505 008e 00       		.byte	0
 506 008f 0A       		.uleb128 0xa
 507 0090 34       		.uleb128 0x34
 508 0091 00       		.byte	0
 509 0092 03       		.uleb128 0x3
 510 0093 08       		.uleb128 0x8
 511 0094 3A       		.uleb128 0x3a
 512 0095 0B       		.uleb128 0xb
 513 0096 3B       		.uleb128 0x3b
 514 0097 0B       		.uleb128 0xb
ARM GAS  /tmp/cc38xw08.s 			page 11


 515 0098 49       		.uleb128 0x49
 516 0099 13       		.uleb128 0x13
 517 009a 02       		.uleb128 0x2
 518 009b 0A       		.uleb128 0xa
 519 009c 00       		.byte	0
 520 009d 00       		.byte	0
 521 009e 0B       		.uleb128 0xb
 522 009f 2E       		.uleb128 0x2e
 523 00a0 01       		.byte	0x1
 524 00a1 3F       		.uleb128 0x3f
 525 00a2 0C       		.uleb128 0xc
 526 00a3 03       		.uleb128 0x3
 527 00a4 0E       		.uleb128 0xe
 528 00a5 3A       		.uleb128 0x3a
 529 00a6 0B       		.uleb128 0xb
 530 00a7 3B       		.uleb128 0x3b
 531 00a8 0B       		.uleb128 0xb
 532 00a9 27       		.uleb128 0x27
 533 00aa 0C       		.uleb128 0xc
 534 00ab 11       		.uleb128 0x11
 535 00ac 01       		.uleb128 0x1
 536 00ad 12       		.uleb128 0x12
 537 00ae 01       		.uleb128 0x1
 538 00af 40       		.uleb128 0x40
 539 00b0 06       		.uleb128 0x6
 540 00b1 9642     		.uleb128 0x2116
 541 00b3 0C       		.uleb128 0xc
 542 00b4 00       		.byte	0
 543 00b5 00       		.byte	0
 544 00b6 00       		.byte	0
 545              		.section	.debug_loc,"",%progbits
 546              	.Ldebug_loc0:
 547              	.LLST0:
 548 0000 00000000 		.4byte	.LFB0-.Ltext0
 549 0004 04000000 		.4byte	.LCFI0-.Ltext0
 550 0008 0200     		.2byte	0x2
 551 000a 7D       		.byte	0x7d
 552 000b 00       		.sleb128 0
 553 000c 04000000 		.4byte	.LCFI0-.Ltext0
 554 0010 28000000 		.4byte	.LFE0-.Ltext0
 555 0014 0200     		.2byte	0x2
 556 0016 7D       		.byte	0x7d
 557 0017 08       		.sleb128 8
 558 0018 00000000 		.4byte	0
 559 001c 00000000 		.4byte	0
 560              	.LLST1:
 561 0020 28000000 		.4byte	.LFB1-.Ltext0
 562 0024 2C000000 		.4byte	.LCFI1-.Ltext0
 563 0028 0200     		.2byte	0x2
 564 002a 7D       		.byte	0x7d
 565 002b 00       		.sleb128 0
 566 002c 2C000000 		.4byte	.LCFI1-.Ltext0
 567 0030 30000000 		.4byte	.LCFI2-.Ltext0
 568 0034 0200     		.2byte	0x2
 569 0036 7D       		.byte	0x7d
 570 0037 04       		.sleb128 4
 571 0038 30000000 		.4byte	.LCFI2-.Ltext0
ARM GAS  /tmp/cc38xw08.s 			page 12


 572 003c A8000000 		.4byte	.LFE1-.Ltext0
 573 0040 0200     		.2byte	0x2
 574 0042 7D       		.byte	0x7d
 575 0043 18       		.sleb128 24
 576 0044 00000000 		.4byte	0
 577 0048 00000000 		.4byte	0
 578              	.LLST2:
 579 004c A8000000 		.4byte	.LFB2-.Ltext0
 580 0050 AC000000 		.4byte	.LCFI3-.Ltext0
 581 0054 0200     		.2byte	0x2
 582 0056 7D       		.byte	0x7d
 583 0057 00       		.sleb128 0
 584 0058 AC000000 		.4byte	.LCFI3-.Ltext0
 585 005c B0000000 		.4byte	.LCFI4-.Ltext0
 586 0060 0200     		.2byte	0x2
 587 0062 7D       		.byte	0x7d
 588 0063 04       		.sleb128 4
 589 0064 B0000000 		.4byte	.LCFI4-.Ltext0
 590 0068 28010000 		.4byte	.LFE2-.Ltext0
 591 006c 0200     		.2byte	0x2
 592 006e 7D       		.byte	0x7d
 593 006f 18       		.sleb128 24
 594 0070 00000000 		.4byte	0
 595 0074 00000000 		.4byte	0
 596              		.section	.debug_aranges,"",%progbits
 597 0000 1C000000 		.4byte	0x1c
 598 0004 0200     		.2byte	0x2
 599 0006 00000000 		.4byte	.Ldebug_info0
 600 000a 04       		.byte	0x4
 601 000b 00       		.byte	0
 602 000c 0000     		.2byte	0
 603 000e 0000     		.2byte	0
 604 0010 00000000 		.4byte	.Ltext0
 605 0014 28010000 		.4byte	.Letext0-.Ltext0
 606 0018 00000000 		.4byte	0
 607 001c 00000000 		.4byte	0
 608              		.section	.debug_line,"",%progbits
 609              	.Ldebug_line0:
 610 0000 7E000000 		.section	.debug_str,"MS",%progbits,1
 610      02003E00 
 610      00000201 
 610      FB0E0D00 
 610      01010101 
 611              	.LASF6:
 612 0000 2F686F6D 		.ascii	"/home/jun/projects/critical_section\000"
 612      652F6A75 
 612      6E2F7072 
 612      6F6A6563 
 612      74732F63 
 613              	.LASF8:
 614 0024 68656C6C 		.ascii	"hello_world\000"
 614      6F5F776F 
 614      726C6400 
 615              	.LASF0:
 616 0030 6C6F6E67 		.ascii	"long unsigned int\000"
 616      20756E73 
 616      69676E65 
ARM GAS  /tmp/cc38xw08.s 			page 13


 616      6420696E 
 616      7400
 617              	.LASF2:
 618 0042 73686F72 		.ascii	"short unsigned int\000"
 618      7420756E 
 618      7369676E 
 618      65642069 
 618      6E7400
 619              	.LASF10:
 620 0055 7461736B 		.ascii	"taskTwo\000"
 620      54776F00 
 621              	.LASF9:
 622 005d 7461736B 		.ascii	"taskOne\000"
 622      4F6E6500 
 623              	.LASF1:
 624 0065 756E7369 		.ascii	"unsigned char\000"
 624      676E6564 
 624      20636861 
 624      7200
 625              	.LASF3:
 626 0073 636F756E 		.ascii	"count\000"
 626      7400
 627              	.LASF7:
 628 0079 43726974 		.ascii	"CriticalSection_t\000"
 628      6963616C 
 628      53656374 
 628      696F6E5F 
 628      7400
 629              	.LASF4:
 630 008b 474E5520 		.ascii	"GNU C 4.8.4 20140725 (release) [ARM/embedded-4_8-br"
 630      4320342E 
 630      382E3420 
 630      32303134 
 630      30373235 
 631 00be 616E6368 		.ascii	"anch revision 213147] -mcpu=arm7tdmi -marm -gdwarf-"
 631      20726576 
 631      6973696F 
 631      6E203231 
 631      33313437 
 632 00f1 32202D4F 		.ascii	"2 -O0 -fomit-frame-pointer\000"
 632      30202D66 
 632      6F6D6974 
 632      2D667261 
 632      6D652D70 
 633              	.LASF5:
 634 010c 7372632F 		.ascii	"src/tasks.c\000"
 634      7461736B 
 634      732E6300 
 635              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140725 (release) [ARM/embedded-4_8-br
ARM GAS  /tmp/cc38xw08.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/cc38xw08.s:49     .rodata:00000000 $d
     /tmp/cc38xw08.s:53     .text:00000000 $a
     /tmp/cc38xw08.s:56     .text:00000000 hello_world
     /tmp/cc38xw08.s:82     .text:00000020 $d
     /tmp/cc38xw08.s:95     .text:00000028 $a
     /tmp/cc38xw08.s:98     .text:00000028 taskOne
     /tmp/cc38xw08.s:157    .text:0000009c $d
     /tmp/cc38xw08.s:168    .text:000000a8 $a
     /tmp/cc38xw08.s:171    .text:000000a8 taskTwo
     /tmp/cc38xw08.s:230    .text:0000011c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
printString
EnterCriticalSection
print_uint32
LeaveCriticalSection
