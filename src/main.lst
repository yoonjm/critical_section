ARM GAS  /tmp/ccgabouO.s 			page 1


   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"main.c"
  13              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.8.4 20140725 (release) [ARM/embedded-4_8-
  14              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I . -I ./inc
  17              	@ -iprefix /opt/gcc-arm-none-eabi-4_8-2014q3/bin/../lib/gcc/arm-none-eabi/4.8.4/
  18              	@ -isysroot /opt/gcc-arm-none-eabi-4_8-2014q3/bin/../arm-none-eabi
  19              	@ -MD src/main.d -MF .dep/main.o.d -MP -MQ src/main.o -D__USES_INITFINI__
  20              	@ -D DEBUG=1 src/main.c -mcpu=arm7tdmi -marm -auxbase-strip src/main.o
  21              	@ -gdwarf-2 -O0 -Wall -Wstrict-prototypes -fomit-frame-pointer
  22              	@ -fverbose-asm
  23              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  24              	@ -fbranch-count-reg -fcommon -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  25              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse -fgcse-lm
  26              	@ -fgnu-runtime -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  27              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  28              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  29              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  30              	@ -fpeephole -fprefetch-loop-arrays -freg-struct-return
  31              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  32              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  33              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  34              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  35              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -fsync-libcalls
  36              	@ -ftrapping-math -ftree-coalesce-vars -ftree-cselim -ftree-forwprop
  37              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  38              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pta
  39              	@ -ftree-reassoc -ftree-scev-cprop -ftree-slp-vectorize
  40              	@ -ftree-vect-loop-version -funit-at-a-time -fverbose-asm
  41              	@ -fzero-initialized-in-bss -marm -mlittle-endian
  42              	@ -mpic-data-is-text-relative -msched-prolog -mthumb-interwork
  43              	@ -mvectorize-with-neon-quad
  44              	
  45              		.text
  46              	.Ltext0:
  47              		.cfi_sections	.debug_frame
  48              		.comm	stackOne,1024,4
  49              		.comm	stackTwo,1024,4
  50              		.comm	cs,4,4
  51              		.comm	stackOneSP,4,4
  52              		.comm	stackTwoSP,4,4
  53              		.comm	currentSP,4,4
  54              		.comm	taskID,4,4
  55              		.align	2
  56              		.global	initialize_stack
  57              		.type	initialize_stack, %function
ARM GAS  /tmp/ccgabouO.s 			page 2


  58              	initialize_stack:
  59              	.LFB0:
  60              		.file 1 "src/main.c"
   1:src/main.c    **** //
   2:src/main.c    **** // Two Tasks Context Switcher
   3:src/main.c    **** //
   4:src/main.c    **** 
   5:src/main.c    **** #include "lpc2378.h"
   6:src/main.c    **** #include "init.h"
   7:src/main.c    **** #include "print.h"
   8:src/main.c    **** #include "critical_section.h"
   9:src/main.c    **** 
  10:src/main.c    **** #define  ARM_MODE_ARM           0x00000000
  11:src/main.c    **** #define  ARM_SVC_MODE_ARM      (0x00000013L + ARM_MODE_ARM)
  12:src/main.c    **** 
  13:src/main.c    **** // Default size of stacks.
  14:src/main.c    **** #define STACKSIZE 256
  15:src/main.c    **** 
  16:src/main.c    **** // Allocate space for two stacks
  17:src/main.c    **** int stackOne[STACKSIZE];
  18:src/main.c    **** int stackTwo[STACKSIZE];
  19:src/main.c    **** 
  20:src/main.c    **** // Task context management
  21:src/main.c    **** //
  22:src/main.c    **** // To manage the context for the two tasks all we really need
  23:src/main.c    **** // is to store the stack pointers. The actual context for the
  24:src/main.c    **** // tasks are stored on their own stacks.
  25:src/main.c    **** //
  26:src/main.c    **** // taskID is a global variable that holds the ID of the current stack.
  27:src/main.c    **** //
  28:src/main.c    **** // currentSP is a global variable that holds the value of the
  29:src/main.c    **** // stack pointer for the current stack.
  30:src/main.c    **** 
  31:src/main.c    **** CriticalSection_t cs;
  32:src/main.c    **** 
  33:src/main.c    **** int stackOneSP;       // Value of task 1's stack pointer
  34:src/main.c    **** int stackTwoSP;       // Value of task 2's stack pointer
  35:src/main.c    **** 
  36:src/main.c    **** int currentSP;        // The value of the current task's stack pointer
  37:src/main.c    **** int taskID;           // The ID of the current task
  38:src/main.c    **** 
  39:src/main.c    **** void taskOne(CriticalSection_t);   // Task one counts up from 0
  40:src/main.c    **** void taskTwo(CriticalSection_t);   // Task two counts down from 0xFFFFFFFF
  41:src/main.c    **** 
  42:src/main.c    **** void initialize_timer_tick (void);   // Intializes timer for the interrupt tick
  43:src/main.c    **** void switch_to_current(void);        // Switches to the current task
  44:src/main.c    **** 
  45:src/main.c    **** /*
  46:src/main.c    **** 	Intialize stack.
  47:src/main.c    **** 
  48:src/main.c    **** 	The stack grows down in memory so we want to start by calculating
  49:src/main.c    **** 	the top of the stack.
  50:src/main.c    **** 
  51:src/main.c    **** 	Then fill in the initial data starting at the top and working down.
  52:src/main.c    **** 
  53:src/main.c    **** 	The important values are the task_address and the initial CPSR.
  54:src/main.c    **** 
ARM GAS  /tmp/ccgabouO.s 			page 3


  55:src/main.c    **** 	LR doesn't matter since the task is a infinite loop and should not exit.
  56:src/main.c    **** 	If it doesn't exit, then it doesn't use the LR since it doesn't return.
  57:src/main.c    **** 
  58:src/main.c    **** */
  59:src/main.c    **** int initialize_stack(int* stack, void* task_address)
  60:src/main.c    **** {
  61              		.loc 1 60 0
  62              		.cfi_startproc
  63              		@ Function supports interworking.
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 10D04DE2 		sub	sp, sp, #16	@,,
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 16
  70 0004 04008DE5 		str	r0, [sp, #4]	@ stack, stack
  71 0008 00108DE5 		str	r1, [sp]	@ task_address, task_address
  61:src/main.c    **** 	// Calculate the top of the stack.
  62:src/main.c    **** 	int *stkptr = (int*)(stack + STACKSIZE - 1);
  72              		.loc 1 62 0
  73 000c 04309DE5 		ldr	r3, [sp, #4]	@ tmp114, stack
  74 0010 FF3F83E2 		add	r3, r3, #1020	@ tmp113, tmp114,
  75 0014 0C308DE5 		str	r3, [sp, #12]	@ tmp113, stkptr
  63:src/main.c    **** 
  64:src/main.c    **** 	*(stkptr)   = (int)task_address;   // PC
  76              		.loc 1 64 0
  77 0018 00209DE5 		ldr	r2, [sp]	@ task_address.0, task_address
  78 001c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp115, stkptr
  79 0020 002083E5 		str	r2, [r3]	@ task_address.0, *stkptr_2
  65:src/main.c    **** 	*(--stkptr) = (int)0x0d0d0d0d;     // R14 - LR
  80              		.loc 1 65 0
  81 0024 0C309DE5 		ldr	r3, [sp, #12]	@ tmp117, stkptr
  82 0028 043043E2 		sub	r3, r3, #4	@ tmp116, tmp117,
  83 002c 0C308DE5 		str	r3, [sp, #12]	@ tmp116, stkptr
  84 0030 0C309DE5 		ldr	r3, [sp, #12]	@ tmp118, stkptr
  85 0034 60219FE5 		ldr	r2, .L3	@ tmp119,
  86 0038 002083E5 		str	r2, [r3]	@ tmp119, *stkptr_5
  66:src/main.c    **** 	*(--stkptr) = (int)0x0c0c0c0c;     // R12
  87              		.loc 1 66 0
  88 003c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp121, stkptr
  89 0040 043043E2 		sub	r3, r3, #4	@ tmp120, tmp121,
  90 0044 0C308DE5 		str	r3, [sp, #12]	@ tmp120, stkptr
  91 0048 0C309DE5 		ldr	r3, [sp, #12]	@ tmp122, stkptr
  92 004c 4C219FE5 		ldr	r2, .L3+4	@ tmp123,
  93 0050 002083E5 		str	r2, [r3]	@ tmp123, *stkptr_6
  67:src/main.c    **** 	*(--stkptr) = (int)0x0b0b0b0b;     // R11
  94              		.loc 1 67 0
  95 0054 0C309DE5 		ldr	r3, [sp, #12]	@ tmp125, stkptr
  96 0058 043043E2 		sub	r3, r3, #4	@ tmp124, tmp125,
  97 005c 0C308DE5 		str	r3, [sp, #12]	@ tmp124, stkptr
  98 0060 0C309DE5 		ldr	r3, [sp, #12]	@ tmp126, stkptr
  99 0064 38219FE5 		ldr	r2, .L3+8	@ tmp127,
 100 0068 002083E5 		str	r2, [r3]	@ tmp127, *stkptr_7
  68:src/main.c    **** 	*(--stkptr) = (int)0x0a0a0a0a;     // R10
 101              		.loc 1 68 0
 102 006c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp129, stkptr
 103 0070 043043E2 		sub	r3, r3, #4	@ tmp128, tmp129,
ARM GAS  /tmp/ccgabouO.s 			page 4


 104 0074 0C308DE5 		str	r3, [sp, #12]	@ tmp128, stkptr
 105 0078 0C309DE5 		ldr	r3, [sp, #12]	@ tmp130, stkptr
 106 007c 24219FE5 		ldr	r2, .L3+12	@ tmp131,
 107 0080 002083E5 		str	r2, [r3]	@ tmp131, *stkptr_8
  69:src/main.c    **** 	*(--stkptr) = (int)0x09090909;     // R9
 108              		.loc 1 69 0
 109 0084 0C309DE5 		ldr	r3, [sp, #12]	@ tmp133, stkptr
 110 0088 043043E2 		sub	r3, r3, #4	@ tmp132, tmp133,
 111 008c 0C308DE5 		str	r3, [sp, #12]	@ tmp132, stkptr
 112 0090 0C309DE5 		ldr	r3, [sp, #12]	@ tmp134, stkptr
 113 0094 10219FE5 		ldr	r2, .L3+16	@ tmp135,
 114 0098 002083E5 		str	r2, [r3]	@ tmp135, *stkptr_9
  70:src/main.c    **** 	*(--stkptr) = (int)0x08080808;     // R8
 115              		.loc 1 70 0
 116 009c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp137, stkptr
 117 00a0 043043E2 		sub	r3, r3, #4	@ tmp136, tmp137,
 118 00a4 0C308DE5 		str	r3, [sp, #12]	@ tmp136, stkptr
 119 00a8 0C309DE5 		ldr	r3, [sp, #12]	@ tmp138, stkptr
 120 00ac FC209FE5 		ldr	r2, .L3+20	@ tmp139,
 121 00b0 002083E5 		str	r2, [r3]	@ tmp139, *stkptr_10
  71:src/main.c    **** 	*(--stkptr) = (int)0x07070707;     // R7
 122              		.loc 1 71 0
 123 00b4 0C309DE5 		ldr	r3, [sp, #12]	@ tmp141, stkptr
 124 00b8 043043E2 		sub	r3, r3, #4	@ tmp140, tmp141,
 125 00bc 0C308DE5 		str	r3, [sp, #12]	@ tmp140, stkptr
 126 00c0 0C309DE5 		ldr	r3, [sp, #12]	@ tmp142, stkptr
 127 00c4 E8209FE5 		ldr	r2, .L3+24	@ tmp143,
 128 00c8 002083E5 		str	r2, [r3]	@ tmp143, *stkptr_11
  72:src/main.c    **** 	*(--stkptr) = (int)0x06060606;     // R6
 129              		.loc 1 72 0
 130 00cc 0C309DE5 		ldr	r3, [sp, #12]	@ tmp145, stkptr
 131 00d0 043043E2 		sub	r3, r3, #4	@ tmp144, tmp145,
 132 00d4 0C308DE5 		str	r3, [sp, #12]	@ tmp144, stkptr
 133 00d8 0C309DE5 		ldr	r3, [sp, #12]	@ tmp146, stkptr
 134 00dc D4209FE5 		ldr	r2, .L3+28	@ tmp147,
 135 00e0 002083E5 		str	r2, [r3]	@ tmp147, *stkptr_12
  73:src/main.c    **** 	*(--stkptr) = (int)0x05050505;     // R5
 136              		.loc 1 73 0
 137 00e4 0C309DE5 		ldr	r3, [sp, #12]	@ tmp149, stkptr
 138 00e8 043043E2 		sub	r3, r3, #4	@ tmp148, tmp149,
 139 00ec 0C308DE5 		str	r3, [sp, #12]	@ tmp148, stkptr
 140 00f0 0C309DE5 		ldr	r3, [sp, #12]	@ tmp150, stkptr
 141 00f4 C0209FE5 		ldr	r2, .L3+32	@ tmp151,
 142 00f8 002083E5 		str	r2, [r3]	@ tmp151, *stkptr_13
  74:src/main.c    **** 	*(--stkptr) = (int)0x04040404;     // R4
 143              		.loc 1 74 0
 144 00fc 0C309DE5 		ldr	r3, [sp, #12]	@ tmp153, stkptr
 145 0100 043043E2 		sub	r3, r3, #4	@ tmp152, tmp153,
 146 0104 0C308DE5 		str	r3, [sp, #12]	@ tmp152, stkptr
 147 0108 0C309DE5 		ldr	r3, [sp, #12]	@ tmp154, stkptr
 148 010c AC209FE5 		ldr	r2, .L3+36	@ tmp155,
 149 0110 002083E5 		str	r2, [r3]	@ tmp155, *stkptr_14
  75:src/main.c    **** 	*(--stkptr) = (int)0x03030303;     // R3
 150              		.loc 1 75 0
 151 0114 0C309DE5 		ldr	r3, [sp, #12]	@ tmp157, stkptr
 152 0118 043043E2 		sub	r3, r3, #4	@ tmp156, tmp157,
 153 011c 0C308DE5 		str	r3, [sp, #12]	@ tmp156, stkptr
ARM GAS  /tmp/ccgabouO.s 			page 5


 154 0120 0C309DE5 		ldr	r3, [sp, #12]	@ tmp158, stkptr
 155 0124 98209FE5 		ldr	r2, .L3+40	@ tmp159,
 156 0128 002083E5 		str	r2, [r3]	@ tmp159, *stkptr_15
  76:src/main.c    **** 	*(--stkptr) = (int)0x02020202;     // R2
 157              		.loc 1 76 0
 158 012c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp161, stkptr
 159 0130 043043E2 		sub	r3, r3, #4	@ tmp160, tmp161,
 160 0134 0C308DE5 		str	r3, [sp, #12]	@ tmp160, stkptr
 161 0138 0C309DE5 		ldr	r3, [sp, #12]	@ tmp162, stkptr
 162 013c 84209FE5 		ldr	r2, .L3+44	@ tmp163,
 163 0140 002083E5 		str	r2, [r3]	@ tmp163, *stkptr_16
  77:src/main.c    **** 	*(--stkptr) = (int)0x01010101;     // R1
 164              		.loc 1 77 0
 165 0144 0C309DE5 		ldr	r3, [sp, #12]	@ tmp165, stkptr
 166 0148 043043E2 		sub	r3, r3, #4	@ tmp164, tmp165,
 167 014c 0C308DE5 		str	r3, [sp, #12]	@ tmp164, stkptr
 168 0150 0C309DE5 		ldr	r3, [sp, #12]	@ tmp166, stkptr
 169 0154 70209FE5 		ldr	r2, .L3+48	@ tmp167,
 170 0158 002083E5 		str	r2, [r3]	@ tmp167, *stkptr_17
  78:src/main.c    **** 	*(--stkptr) = (int)0x00000000;     // R0
 171              		.loc 1 78 0
 172 015c 0C309DE5 		ldr	r3, [sp, #12]	@ tmp169, stkptr
 173 0160 043043E2 		sub	r3, r3, #4	@ tmp168, tmp169,
 174 0164 0C308DE5 		str	r3, [sp, #12]	@ tmp168, stkptr
 175 0168 0C309DE5 		ldr	r3, [sp, #12]	@ tmp170, stkptr
 176 016c 0020A0E3 		mov	r2, #0	@ tmp171,
 177 0170 002083E5 		str	r2, [r3]	@ tmp171, *stkptr_18
  79:src/main.c    **** 	*(--stkptr) = ARM_SVC_MODE_ARM;    // CPSR
 178              		.loc 1 79 0
 179 0174 0C309DE5 		ldr	r3, [sp, #12]	@ tmp173, stkptr
 180 0178 043043E2 		sub	r3, r3, #4	@ tmp172, tmp173,
 181 017c 0C308DE5 		str	r3, [sp, #12]	@ tmp172, stkptr
 182 0180 0C309DE5 		ldr	r3, [sp, #12]	@ tmp174, stkptr
 183 0184 1320A0E3 		mov	r2, #19	@ tmp175,
 184 0188 002083E5 		str	r2, [r3]	@ tmp175, *stkptr_19
  80:src/main.c    **** 
  81:src/main.c    **** 	return (int)(stkptr);
 185              		.loc 1 81 0
 186 018c 0C309DE5 		ldr	r3, [sp, #12]	@ D.4685, stkptr
  82:src/main.c    **** }
 187              		.loc 1 82 0
 188 0190 0300A0E1 		mov	r0, r3	@, <retval>
 189 0194 10D08DE2 		add	sp, sp, #16	@,,
 190              		@ sp needed	@
 191 0198 1EFF2FE1 		bx	lr	@
 192              	.L4:
 193              		.align	2
 194              	.L3:
 195 019c 0D0D0D0D 		.word	218959117
 196 01a0 0C0C0C0C 		.word	202116108
 197 01a4 0B0B0B0B 		.word	185273099
 198 01a8 0A0A0A0A 		.word	168430090
 199 01ac 09090909 		.word	151587081
 200 01b0 08080808 		.word	134744072
 201 01b4 07070707 		.word	117901063
 202 01b8 06060606 		.word	101058054
 203 01bc 05050505 		.word	84215045
ARM GAS  /tmp/ccgabouO.s 			page 6


 204 01c0 04040404 		.word	67372036
 205 01c4 03030303 		.word	50529027
 206 01c8 02020202 		.word	33686018
 207 01cc 01010101 		.word	16843009
 208              		.cfi_endproc
 209              	.LFE0:
 210              		.size	initialize_stack, .-initialize_stack
 211              		.section	.rodata
 212              		.align	2
 213              	.LC0:
 214 0000 53776974 		.ascii	"Switch\012\000"
 214      63680A00 
 215              		.text
 216              		.align	2
 217              		.global	scheduler
 218              		.type	scheduler, %function
 219              	scheduler:
 220              	.LFB1:
  83:src/main.c    **** 
  84:src/main.c    **** /*
  85:src/main.c    **** 	Simple task scheduler that decides which task to run.
  86:src/main.c    **** 
  87:src/main.c    **** 	Alternates back and forth between two tasks by changing the
  88:src/main.c    **** 	value of currentSP used by SwitchingIRQHandler in switch.s
  89:src/main.c    **** 
  90:src/main.c    **** 	SwitchingIRQHandler does the real context switching work.
  91:src/main.c    **** */
  92:src/main.c    **** void scheduler(int sp)
  93:src/main.c    **** {
 221              		.loc 1 93 0
 222              		.cfi_startproc
 223              		@ Function supports interworking.
 224              		@ args = 0, pretend = 0, frame = 8
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 01d0 04E02DE5 		str	lr, [sp, #-4]!	@,
 227              	.LCFI1:
 228              		.cfi_def_cfa_offset 4
 229              		.cfi_offset 14, -4
 230 01d4 0CD04DE2 		sub	sp, sp, #12	@,,
 231              	.LCFI2:
 232              		.cfi_def_cfa_offset 16
 233 01d8 04008DE5 		str	r0, [sp, #4]	@ sp, sp
  94:src/main.c    **** 	WRITEREG32(T0IR, 0xFF);            // Reset timer
 234              		.loc 1 94 0
 235 01dc 7C309FE5 		ldr	r3, .L8	@ D.4686,
 236 01e0 FF20A0E3 		mov	r2, #255	@ tmp114,
 237 01e4 002083E5 		str	r2, [r3]	@ tmp114, *_1
  95:src/main.c    **** 	printString("Switch\n");
 238              		.loc 1 95 0
 239 01e8 74009FE5 		ldr	r0, .L8+4	@,
 240 01ec FEFFFFEB 		bl	printString	@
  96:src/main.c    **** 
  97:src/main.c    **** 	if (taskID == 1)
 241              		.loc 1 97 0
 242 01f0 70309FE5 		ldr	r3, .L8+8	@ tmp115,
 243 01f4 003093E5 		ldr	r3, [r3]	@ taskID.1, taskID
 244 01f8 010053E3 		cmp	r3, #1	@ taskID.1,
ARM GAS  /tmp/ccgabouO.s 			page 7


 245 01fc 0A00001A 		bne	.L6	@,
  98:src/main.c    **** 	{
  99:src/main.c    **** 		stackOneSP = sp;               // Store stack pointer for task 1
 246              		.loc 1 99 0
 247 0200 64309FE5 		ldr	r3, .L8+12	@ tmp116,
 248 0204 04209DE5 		ldr	r2, [sp, #4]	@ tmp117, sp
 249 0208 002083E5 		str	r2, [r3]	@ tmp117, stackOneSP
 100:src/main.c    **** 		taskID = 2;                    // Set the taskID to task 2
 250              		.loc 1 100 0
 251 020c 54309FE5 		ldr	r3, .L8+8	@ tmp118,
 252 0210 0220A0E3 		mov	r2, #2	@ tmp119,
 253 0214 002083E5 		str	r2, [r3]	@ tmp119, taskID
 101:src/main.c    **** 		currentSP = stackTwoSP;        // Set the current stack pointer to task 2's stack pointer
 254              		.loc 1 101 0
 255 0218 50309FE5 		ldr	r3, .L8+16	@ tmp120,
 256 021c 002093E5 		ldr	r2, [r3]	@ stackTwoSP.2, stackTwoSP
 257 0220 4C309FE5 		ldr	r3, .L8+20	@ tmp121,
 258 0224 002083E5 		str	r2, [r3]	@ stackTwoSP.2, currentSP
 259 0228 090000EA 		b	.L5	@
 260              	.L6:
 102:src/main.c    **** 	}
 103:src/main.c    **** 	else
 104:src/main.c    **** 	{
 105:src/main.c    **** 		stackTwoSP = sp;               // Store stack pointer for task 2
 261              		.loc 1 105 0
 262 022c 3C309FE5 		ldr	r3, .L8+16	@ tmp122,
 263 0230 04209DE5 		ldr	r2, [sp, #4]	@ tmp123, sp
 264 0234 002083E5 		str	r2, [r3]	@ tmp123, stackTwoSP
 106:src/main.c    **** 		taskID = 1;                    // Set the taskID to task 1
 265              		.loc 1 106 0
 266 0238 28309FE5 		ldr	r3, .L8+8	@ tmp124,
 267 023c 0120A0E3 		mov	r2, #1	@ tmp125,
 268 0240 002083E5 		str	r2, [r3]	@ tmp125, taskID
 107:src/main.c    **** 		currentSP = stackOneSP;        // Set the current stack pointer to task 1's stack pointer
 269              		.loc 1 107 0
 270 0244 20309FE5 		ldr	r3, .L8+12	@ tmp126,
 271 0248 002093E5 		ldr	r2, [r3]	@ stackOneSP.3, stackOneSP
 272 024c 20309FE5 		ldr	r3, .L8+20	@ tmp127,
 273 0250 002083E5 		str	r2, [r3]	@ stackOneSP.3, currentSP
 274              	.L5:
 108:src/main.c    **** 	}
 109:src/main.c    **** }
 275              		.loc 1 109 0
 276 0254 0CD08DE2 		add	sp, sp, #12	@,,
 277              		@ sp needed	@
 278 0258 04E09DE4 		ldr	lr, [sp], #4	@,
 279 025c 1EFF2FE1 		bx	lr	@
 280              	.L9:
 281              		.align	2
 282              	.L8:
 283 0260 004000E0 		.word	-536854528
 284 0264 00000000 		.word	.LC0
 285 0268 00000000 		.word	taskID
 286 026c 00000000 		.word	stackOneSP
 287 0270 00000000 		.word	stackTwoSP
 288 0274 00000000 		.word	currentSP
 289              		.cfi_endproc
ARM GAS  /tmp/ccgabouO.s 			page 8


 290              	.LFE1:
 291              		.size	scheduler, .-scheduler
 292              		.section	.rodata
 293              		.align	2
 294              	.LC1:
 295 0008 556E6976 		.ascii	"University of Washington - Context_Switcher Test Ap"
 295      65727369 
 295      7479206F 
 295      66205761 
 295      7368696E 
 296 003b 706C6963 		.ascii	"plication \012\000"
 296      6174696F 
 296      6E200A00 
 297 0047 00       		.align	2
 298              	.LC2:
 299 0048 4D61696E 		.ascii	"Main completed.\012\000"
 299      20636F6D 
 299      706C6574 
 299      65642E0A 
 299      00
 300 0059 000000   		.text
 301              		.align	2
 302              		.global	main
 303              		.type	main, %function
 304              	main:
 305              	.LFB2:
 110:src/main.c    **** 
 111:src/main.c    **** ///////////////////////////////////////////////////////////////////////////////////////////
 112:src/main.c    **** //
 113:src/main.c    **** //  main
 114:src/main.c    **** //
 115:src/main.c    **** //  Intializes two stacks one for each task. Set currentSP and taskID to the first task.
 116:src/main.c    **** //  Starts the timer for the interrupt ticks which will cause the tasks to switch.
 117:src/main.c    **** //  Runs the first task.
 118:src/main.c    **** //
 119:src/main.c    **** //  This function never runs passed the call to switch_to_current() so it never exits.
 120:src/main.c    **** //
 121:src/main.c    **** int main(void)
 122:src/main.c    **** {
 306              		.loc 1 122 0
 307              		.cfi_startproc
 308              		@ Function supports interworking.
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311 0278 08402DE9 		stmfd	sp!, {r3, lr}	@,
 312              	.LCFI3:
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 3, -8
 315              		.cfi_offset 14, -4
 123:src/main.c    ****     initHardware();
 316              		.loc 1 123 0
 317 027c FEFFFFEB 		bl	initHardware	@
 124:src/main.c    **** 
 125:src/main.c    ****     printString("University of Washington - Context_Switcher Test Application \n");
 318              		.loc 1 125 0
 319 0280 80009FE5 		ldr	r0, .L12	@,
 320 0284 FEFFFFEB 		bl	printString	@
ARM GAS  /tmp/ccgabouO.s 			page 9


 126:src/main.c    **** 
 127:src/main.c    ****     CreateCriticalSection(cs);
 321              		.loc 1 127 0
 322 0288 7C309FE5 		ldr	r3, .L12+4	@ tmp116,
 323 028c 003093E5 		ldr	r3, [r3]	@ cs.4, cs
 324 0290 0300A0E1 		mov	r0, r3	@, cs.4
 325 0294 FEFFFFEB 		bl	CreateCriticalSection	@
 128:src/main.c    **** 
 129:src/main.c    ****     // Setup initial stacks for tasks
 130:src/main.c    ****     stackOneSP = initialize_stack(stackOne, (void*)taskOne);
 326              		.loc 1 130 0
 327 0298 70009FE5 		ldr	r0, .L12+8	@,
 328 029c 70109FE5 		ldr	r1, .L12+12	@,
 329 02a0 FEFFFFEB 		bl	initialize_stack	@
 330 02a4 0020A0E1 		mov	r2, r0	@ stackOneSP.5,
 331 02a8 68309FE5 		ldr	r3, .L12+16	@ tmp117,
 332 02ac 002083E5 		str	r2, [r3]	@ stackOneSP.5, stackOneSP
 131:src/main.c    ****     stackTwoSP = initialize_stack(stackTwo, (void*)taskTwo);
 333              		.loc 1 131 0
 334 02b0 64009FE5 		ldr	r0, .L12+20	@,
 335 02b4 64109FE5 		ldr	r1, .L12+24	@,
 336 02b8 FEFFFFEB 		bl	initialize_stack	@
 337 02bc 0020A0E1 		mov	r2, r0	@ stackTwoSP.6,
 338 02c0 5C309FE5 		ldr	r3, .L12+28	@ tmp118,
 339 02c4 002083E5 		str	r2, [r3]	@ stackTwoSP.6, stackTwoSP
 132:src/main.c    **** 
 133:src/main.c    ****     // Set current to first task
 134:src/main.c    ****     taskID = 1;
 340              		.loc 1 134 0
 341 02c8 58309FE5 		ldr	r3, .L12+32	@ tmp119,
 342 02cc 0120A0E3 		mov	r2, #1	@ tmp120,
 343 02d0 002083E5 		str	r2, [r3]	@ tmp120, taskID
 135:src/main.c    ****     currentSP = stackOneSP;
 344              		.loc 1 135 0
 345 02d4 3C309FE5 		ldr	r3, .L12+16	@ tmp121,
 346 02d8 002093E5 		ldr	r2, [r3]	@ stackOneSP.7, stackOneSP
 347 02dc 48309FE5 		ldr	r3, .L12+36	@ tmp122,
 348 02e0 002083E5 		str	r2, [r3]	@ stackOneSP.7, currentSP
 136:src/main.c    **** 
 137:src/main.c    ****     initialize_timer_tick();
 349              		.loc 1 137 0
 350 02e4 FEFFFFEB 		bl	initialize_timer_tick	@
 138:src/main.c    **** 
 139:src/main.c    ****     // Run the current task
 140:src/main.c    ****     switch_to_current();         // This call never returns to this function.
 351              		.loc 1 140 0
 352 02e8 FEFFFFEB 		bl	switch_to_current	@
 141:src/main.c    **** 
 142:src/main.c    ****     // Never gets here.
 143:src/main.c    ****     printString("Main completed.\n");
 353              		.loc 1 143 0
 354 02ec 3C009FE5 		ldr	r0, .L12+40	@,
 355 02f0 FEFFFFEB 		bl	printString	@
 144:src/main.c    **** 
 145:src/main.c    ****     DeleteCriticalSection(cs);
 356              		.loc 1 145 0
 357 02f4 10309FE5 		ldr	r3, .L12+4	@ tmp123,
ARM GAS  /tmp/ccgabouO.s 			page 10


 358 02f8 003093E5 		ldr	r3, [r3]	@ cs.8, cs
 359 02fc 0300A0E1 		mov	r0, r3	@, cs.8
 360 0300 FEFFFFEB 		bl	DeleteCriticalSection	@
 361              	.L11:
 146:src/main.c    **** 
 147:src/main.c    ****     while(1);
 362              		.loc 1 147 0 discriminator 1
 363 0304 FEFFFFEA 		b	.L11	@
 364              	.L13:
 365              		.align	2
 366              	.L12:
 367 0308 08000000 		.word	.LC1
 368 030c 00000000 		.word	cs
 369 0310 00000000 		.word	stackOne
 370 0314 00000000 		.word	taskOne
 371 0318 00000000 		.word	stackOneSP
 372 031c 00000000 		.word	stackTwo
 373 0320 00000000 		.word	taskTwo
 374 0324 00000000 		.word	stackTwoSP
 375 0328 00000000 		.word	taskID
 376 032c 00000000 		.word	currentSP
 377 0330 48000000 		.word	.LC2
 378              		.cfi_endproc
 379              	.LFE2:
 380              		.size	main, .-main
 381              	.Letext0:
 382              		.file 2 "./inc/critical_section.h"
 383              		.section	.debug_info,"",%progbits
 384              	.Ldebug_info0:
 385 0000 70010000 		.4byte	0x170
 386 0004 0200     		.2byte	0x2
 387 0006 00000000 		.4byte	.Ldebug_abbrev0
 388 000a 04       		.byte	0x4
 389 000b 01       		.uleb128 0x1
 390 000c 8F000000 		.4byte	.LASF12
 391 0010 01       		.byte	0x1
 392 0011 53000000 		.4byte	.LASF13
 393 0015 12000000 		.4byte	.LASF14
 394 0019 00000000 		.4byte	.Ltext0
 395 001d 34030000 		.4byte	.Letext0
 396 0021 00000000 		.4byte	.Ldebug_line0
 397 0025 02       		.uleb128 0x2
 398 0026 04       		.byte	0x4
 399 0027 07       		.byte	0x7
 400 0028 41000000 		.4byte	.LASF0
 401 002c 03       		.uleb128 0x3
 402 002d 04       		.byte	0x4
 403 002e 05       		.byte	0x5
 404 002f 696E7400 		.ascii	"int\000"
 405 0033 02       		.uleb128 0x2
 406 0034 01       		.byte	0x1
 407 0035 08       		.byte	0x8
 408 0036 81000000 		.4byte	.LASF1
 409 003a 02       		.uleb128 0x2
 410 003b 02       		.byte	0x2
 411 003c 07       		.byte	0x7
 412 003d 22010000 		.4byte	.LASF2
ARM GAS  /tmp/ccgabouO.s 			page 11


 413 0041 04       		.uleb128 0x4
 414 0042 5E000000 		.4byte	.LASF15
 415 0046 02       		.byte	0x2
 416 0047 0A       		.byte	0xa
 417 0048 2C000000 		.4byte	0x2c
 418 004c 05       		.uleb128 0x5
 419 004d 01       		.byte	0x1
 420 004e 44010000 		.4byte	.LASF16
 421 0052 01       		.byte	0x1
 422 0053 3B       		.byte	0x3b
 423 0054 01       		.byte	0x1
 424 0055 2C000000 		.4byte	0x2c
 425 0059 00000000 		.4byte	.LFB0
 426 005d D0010000 		.4byte	.LFE0
 427 0061 00000000 		.4byte	.LLST0
 428 0065 01       		.byte	0x1
 429 0066 95000000 		.4byte	0x95
 430 006a 06       		.uleb128 0x6
 431 006b 35010000 		.4byte	.LASF3
 432 006f 01       		.byte	0x1
 433 0070 3B       		.byte	0x3b
 434 0071 95000000 		.4byte	0x95
 435 0075 02       		.byte	0x2
 436 0076 91       		.byte	0x91
 437 0077 74       		.sleb128 -12
 438 0078 06       		.uleb128 0x6
 439 0079 15010000 		.4byte	.LASF4
 440 007d 01       		.byte	0x1
 441 007e 3B       		.byte	0x3b
 442 007f 9B000000 		.4byte	0x9b
 443 0083 02       		.byte	0x2
 444 0084 91       		.byte	0x91
 445 0085 70       		.sleb128 -16
 446 0086 07       		.uleb128 0x7
 447 0087 0B000000 		.4byte	.LASF17
 448 008b 01       		.byte	0x1
 449 008c 3E       		.byte	0x3e
 450 008d 95000000 		.4byte	0x95
 451 0091 02       		.byte	0x2
 452 0092 91       		.byte	0x91
 453 0093 7C       		.sleb128 -4
 454 0094 00       		.byte	0
 455 0095 08       		.uleb128 0x8
 456 0096 04       		.byte	0x4
 457 0097 2C000000 		.4byte	0x2c
 458 009b 09       		.uleb128 0x9
 459 009c 04       		.byte	0x4
 460 009d 0A       		.uleb128 0xa
 461 009e 01       		.byte	0x1
 462 009f 77000000 		.4byte	.LASF18
 463 00a3 01       		.byte	0x1
 464 00a4 5C       		.byte	0x5c
 465 00a5 01       		.byte	0x1
 466 00a6 D0010000 		.4byte	.LFB1
 467 00aa 78020000 		.4byte	.LFE1
 468 00ae 20000000 		.4byte	.LLST1
 469 00b2 01       		.byte	0x1
ARM GAS  /tmp/ccgabouO.s 			page 12


 470 00b3 C5000000 		.4byte	0xc5
 471 00b7 0B       		.uleb128 0xb
 472 00b8 737000   		.ascii	"sp\000"
 473 00bb 01       		.byte	0x1
 474 00bc 5C       		.byte	0x5c
 475 00bd 2C000000 		.4byte	0x2c
 476 00c1 02       		.byte	0x2
 477 00c2 91       		.byte	0x91
 478 00c3 74       		.sleb128 -12
 479 00c4 00       		.byte	0
 480 00c5 0C       		.uleb128 0xc
 481 00c6 01       		.byte	0x1
 482 00c7 10010000 		.4byte	.LASF19
 483 00cb 01       		.byte	0x1
 484 00cc 79       		.byte	0x79
 485 00cd 01       		.byte	0x1
 486 00ce 2C000000 		.4byte	0x2c
 487 00d2 78020000 		.4byte	.LFB2
 488 00d6 34030000 		.4byte	.LFE2
 489 00da 4C000000 		.4byte	.LLST2
 490 00de 01       		.byte	0x1
 491 00df 0D       		.uleb128 0xd
 492 00e0 2C000000 		.4byte	0x2c
 493 00e4 EF000000 		.4byte	0xef
 494 00e8 0E       		.uleb128 0xe
 495 00e9 EF000000 		.4byte	0xef
 496 00ed FF       		.byte	0xff
 497 00ee 00       		.byte	0
 498 00ef 02       		.uleb128 0x2
 499 00f0 04       		.byte	0x4
 500 00f1 07       		.byte	0x7
 501 00f2 68010000 		.4byte	.LASF5
 502 00f6 0F       		.uleb128 0xf
 503 00f7 55010000 		.4byte	.LASF6
 504 00fb 01       		.byte	0x1
 505 00fc 11       		.byte	0x11
 506 00fd DF000000 		.4byte	0xdf
 507 0101 01       		.byte	0x1
 508 0102 05       		.byte	0x5
 509 0103 03       		.byte	0x3
 510 0104 00000000 		.4byte	stackOne
 511 0108 0F       		.uleb128 0xf
 512 0109 3B010000 		.4byte	.LASF7
 513 010d 01       		.byte	0x1
 514 010e 12       		.byte	0x12
 515 010f DF000000 		.4byte	0xdf
 516 0113 01       		.byte	0x1
 517 0114 05       		.byte	0x5
 518 0115 03       		.byte	0x3
 519 0116 00000000 		.4byte	stackTwo
 520 011a 10       		.uleb128 0x10
 521 011b 637300   		.ascii	"cs\000"
 522 011e 01       		.byte	0x1
 523 011f 1F       		.byte	0x1f
 524 0120 41000000 		.4byte	0x41
 525 0124 01       		.byte	0x1
 526 0125 05       		.byte	0x5
ARM GAS  /tmp/ccgabouO.s 			page 13


 527 0126 03       		.byte	0x3
 528 0127 00000000 		.4byte	cs
 529 012b 0F       		.uleb128 0xf
 530 012c 36000000 		.4byte	.LASF8
 531 0130 01       		.byte	0x1
 532 0131 21       		.byte	0x21
 533 0132 2C000000 		.4byte	0x2c
 534 0136 01       		.byte	0x1
 535 0137 05       		.byte	0x5
 536 0138 03       		.byte	0x3
 537 0139 00000000 		.4byte	stackOneSP
 538 013d 0F       		.uleb128 0xf
 539 013e 00000000 		.4byte	.LASF9
 540 0142 01       		.byte	0x1
 541 0143 22       		.byte	0x22
 542 0144 2C000000 		.4byte	0x2c
 543 0148 01       		.byte	0x1
 544 0149 05       		.byte	0x5
 545 014a 03       		.byte	0x3
 546 014b 00000000 		.4byte	stackTwoSP
 547 014f 0F       		.uleb128 0xf
 548 0150 5E010000 		.4byte	.LASF10
 549 0154 01       		.byte	0x1
 550 0155 24       		.byte	0x24
 551 0156 2C000000 		.4byte	0x2c
 552 015a 01       		.byte	0x1
 553 015b 05       		.byte	0x5
 554 015c 03       		.byte	0x3
 555 015d 00000000 		.4byte	currentSP
 556 0161 0F       		.uleb128 0xf
 557 0162 70000000 		.4byte	.LASF11
 558 0166 01       		.byte	0x1
 559 0167 25       		.byte	0x25
 560 0168 2C000000 		.4byte	0x2c
 561 016c 01       		.byte	0x1
 562 016d 05       		.byte	0x5
 563 016e 03       		.byte	0x3
 564 016f 00000000 		.4byte	taskID
 565 0173 00       		.byte	0
 566              		.section	.debug_abbrev,"",%progbits
 567              	.Ldebug_abbrev0:
 568 0000 01       		.uleb128 0x1
 569 0001 11       		.uleb128 0x11
 570 0002 01       		.byte	0x1
 571 0003 25       		.uleb128 0x25
 572 0004 0E       		.uleb128 0xe
 573 0005 13       		.uleb128 0x13
 574 0006 0B       		.uleb128 0xb
 575 0007 03       		.uleb128 0x3
 576 0008 0E       		.uleb128 0xe
 577 0009 1B       		.uleb128 0x1b
 578 000a 0E       		.uleb128 0xe
 579 000b 11       		.uleb128 0x11
 580 000c 01       		.uleb128 0x1
 581 000d 12       		.uleb128 0x12
 582 000e 01       		.uleb128 0x1
 583 000f 10       		.uleb128 0x10
ARM GAS  /tmp/ccgabouO.s 			page 14


 584 0010 06       		.uleb128 0x6
 585 0011 00       		.byte	0
 586 0012 00       		.byte	0
 587 0013 02       		.uleb128 0x2
 588 0014 24       		.uleb128 0x24
 589 0015 00       		.byte	0
 590 0016 0B       		.uleb128 0xb
 591 0017 0B       		.uleb128 0xb
 592 0018 3E       		.uleb128 0x3e
 593 0019 0B       		.uleb128 0xb
 594 001a 03       		.uleb128 0x3
 595 001b 0E       		.uleb128 0xe
 596 001c 00       		.byte	0
 597 001d 00       		.byte	0
 598 001e 03       		.uleb128 0x3
 599 001f 24       		.uleb128 0x24
 600 0020 00       		.byte	0
 601 0021 0B       		.uleb128 0xb
 602 0022 0B       		.uleb128 0xb
 603 0023 3E       		.uleb128 0x3e
 604 0024 0B       		.uleb128 0xb
 605 0025 03       		.uleb128 0x3
 606 0026 08       		.uleb128 0x8
 607 0027 00       		.byte	0
 608 0028 00       		.byte	0
 609 0029 04       		.uleb128 0x4
 610 002a 16       		.uleb128 0x16
 611 002b 00       		.byte	0
 612 002c 03       		.uleb128 0x3
 613 002d 0E       		.uleb128 0xe
 614 002e 3A       		.uleb128 0x3a
 615 002f 0B       		.uleb128 0xb
 616 0030 3B       		.uleb128 0x3b
 617 0031 0B       		.uleb128 0xb
 618 0032 49       		.uleb128 0x49
 619 0033 13       		.uleb128 0x13
 620 0034 00       		.byte	0
 621 0035 00       		.byte	0
 622 0036 05       		.uleb128 0x5
 623 0037 2E       		.uleb128 0x2e
 624 0038 01       		.byte	0x1
 625 0039 3F       		.uleb128 0x3f
 626 003a 0C       		.uleb128 0xc
 627 003b 03       		.uleb128 0x3
 628 003c 0E       		.uleb128 0xe
 629 003d 3A       		.uleb128 0x3a
 630 003e 0B       		.uleb128 0xb
 631 003f 3B       		.uleb128 0x3b
 632 0040 0B       		.uleb128 0xb
 633 0041 27       		.uleb128 0x27
 634 0042 0C       		.uleb128 0xc
 635 0043 49       		.uleb128 0x49
 636 0044 13       		.uleb128 0x13
 637 0045 11       		.uleb128 0x11
 638 0046 01       		.uleb128 0x1
 639 0047 12       		.uleb128 0x12
 640 0048 01       		.uleb128 0x1
ARM GAS  /tmp/ccgabouO.s 			page 15


 641 0049 40       		.uleb128 0x40
 642 004a 06       		.uleb128 0x6
 643 004b 9742     		.uleb128 0x2117
 644 004d 0C       		.uleb128 0xc
 645 004e 01       		.uleb128 0x1
 646 004f 13       		.uleb128 0x13
 647 0050 00       		.byte	0
 648 0051 00       		.byte	0
 649 0052 06       		.uleb128 0x6
 650 0053 05       		.uleb128 0x5
 651 0054 00       		.byte	0
 652 0055 03       		.uleb128 0x3
 653 0056 0E       		.uleb128 0xe
 654 0057 3A       		.uleb128 0x3a
 655 0058 0B       		.uleb128 0xb
 656 0059 3B       		.uleb128 0x3b
 657 005a 0B       		.uleb128 0xb
 658 005b 49       		.uleb128 0x49
 659 005c 13       		.uleb128 0x13
 660 005d 02       		.uleb128 0x2
 661 005e 0A       		.uleb128 0xa
 662 005f 00       		.byte	0
 663 0060 00       		.byte	0
 664 0061 07       		.uleb128 0x7
 665 0062 34       		.uleb128 0x34
 666 0063 00       		.byte	0
 667 0064 03       		.uleb128 0x3
 668 0065 0E       		.uleb128 0xe
 669 0066 3A       		.uleb128 0x3a
 670 0067 0B       		.uleb128 0xb
 671 0068 3B       		.uleb128 0x3b
 672 0069 0B       		.uleb128 0xb
 673 006a 49       		.uleb128 0x49
 674 006b 13       		.uleb128 0x13
 675 006c 02       		.uleb128 0x2
 676 006d 0A       		.uleb128 0xa
 677 006e 00       		.byte	0
 678 006f 00       		.byte	0
 679 0070 08       		.uleb128 0x8
 680 0071 0F       		.uleb128 0xf
 681 0072 00       		.byte	0
 682 0073 0B       		.uleb128 0xb
 683 0074 0B       		.uleb128 0xb
 684 0075 49       		.uleb128 0x49
 685 0076 13       		.uleb128 0x13
 686 0077 00       		.byte	0
 687 0078 00       		.byte	0
 688 0079 09       		.uleb128 0x9
 689 007a 0F       		.uleb128 0xf
 690 007b 00       		.byte	0
 691 007c 0B       		.uleb128 0xb
 692 007d 0B       		.uleb128 0xb
 693 007e 00       		.byte	0
 694 007f 00       		.byte	0
 695 0080 0A       		.uleb128 0xa
 696 0081 2E       		.uleb128 0x2e
 697 0082 01       		.byte	0x1
ARM GAS  /tmp/ccgabouO.s 			page 16


 698 0083 3F       		.uleb128 0x3f
 699 0084 0C       		.uleb128 0xc
 700 0085 03       		.uleb128 0x3
 701 0086 0E       		.uleb128 0xe
 702 0087 3A       		.uleb128 0x3a
 703 0088 0B       		.uleb128 0xb
 704 0089 3B       		.uleb128 0x3b
 705 008a 0B       		.uleb128 0xb
 706 008b 27       		.uleb128 0x27
 707 008c 0C       		.uleb128 0xc
 708 008d 11       		.uleb128 0x11
 709 008e 01       		.uleb128 0x1
 710 008f 12       		.uleb128 0x12
 711 0090 01       		.uleb128 0x1
 712 0091 40       		.uleb128 0x40
 713 0092 06       		.uleb128 0x6
 714 0093 9642     		.uleb128 0x2116
 715 0095 0C       		.uleb128 0xc
 716 0096 01       		.uleb128 0x1
 717 0097 13       		.uleb128 0x13
 718 0098 00       		.byte	0
 719 0099 00       		.byte	0
 720 009a 0B       		.uleb128 0xb
 721 009b 05       		.uleb128 0x5
 722 009c 00       		.byte	0
 723 009d 03       		.uleb128 0x3
 724 009e 08       		.uleb128 0x8
 725 009f 3A       		.uleb128 0x3a
 726 00a0 0B       		.uleb128 0xb
 727 00a1 3B       		.uleb128 0x3b
 728 00a2 0B       		.uleb128 0xb
 729 00a3 49       		.uleb128 0x49
 730 00a4 13       		.uleb128 0x13
 731 00a5 02       		.uleb128 0x2
 732 00a6 0A       		.uleb128 0xa
 733 00a7 00       		.byte	0
 734 00a8 00       		.byte	0
 735 00a9 0C       		.uleb128 0xc
 736 00aa 2E       		.uleb128 0x2e
 737 00ab 00       		.byte	0
 738 00ac 3F       		.uleb128 0x3f
 739 00ad 0C       		.uleb128 0xc
 740 00ae 03       		.uleb128 0x3
 741 00af 0E       		.uleb128 0xe
 742 00b0 3A       		.uleb128 0x3a
 743 00b1 0B       		.uleb128 0xb
 744 00b2 3B       		.uleb128 0x3b
 745 00b3 0B       		.uleb128 0xb
 746 00b4 27       		.uleb128 0x27
 747 00b5 0C       		.uleb128 0xc
 748 00b6 49       		.uleb128 0x49
 749 00b7 13       		.uleb128 0x13
 750 00b8 11       		.uleb128 0x11
 751 00b9 01       		.uleb128 0x1
 752 00ba 12       		.uleb128 0x12
 753 00bb 01       		.uleb128 0x1
 754 00bc 40       		.uleb128 0x40
ARM GAS  /tmp/ccgabouO.s 			page 17


 755 00bd 06       		.uleb128 0x6
 756 00be 9642     		.uleb128 0x2116
 757 00c0 0C       		.uleb128 0xc
 758 00c1 00       		.byte	0
 759 00c2 00       		.byte	0
 760 00c3 0D       		.uleb128 0xd
 761 00c4 01       		.uleb128 0x1
 762 00c5 01       		.byte	0x1
 763 00c6 49       		.uleb128 0x49
 764 00c7 13       		.uleb128 0x13
 765 00c8 01       		.uleb128 0x1
 766 00c9 13       		.uleb128 0x13
 767 00ca 00       		.byte	0
 768 00cb 00       		.byte	0
 769 00cc 0E       		.uleb128 0xe
 770 00cd 21       		.uleb128 0x21
 771 00ce 00       		.byte	0
 772 00cf 49       		.uleb128 0x49
 773 00d0 13       		.uleb128 0x13
 774 00d1 2F       		.uleb128 0x2f
 775 00d2 0B       		.uleb128 0xb
 776 00d3 00       		.byte	0
 777 00d4 00       		.byte	0
 778 00d5 0F       		.uleb128 0xf
 779 00d6 34       		.uleb128 0x34
 780 00d7 00       		.byte	0
 781 00d8 03       		.uleb128 0x3
 782 00d9 0E       		.uleb128 0xe
 783 00da 3A       		.uleb128 0x3a
 784 00db 0B       		.uleb128 0xb
 785 00dc 3B       		.uleb128 0x3b
 786 00dd 0B       		.uleb128 0xb
 787 00de 49       		.uleb128 0x49
 788 00df 13       		.uleb128 0x13
 789 00e0 3F       		.uleb128 0x3f
 790 00e1 0C       		.uleb128 0xc
 791 00e2 02       		.uleb128 0x2
 792 00e3 0A       		.uleb128 0xa
 793 00e4 00       		.byte	0
 794 00e5 00       		.byte	0
 795 00e6 10       		.uleb128 0x10
 796 00e7 34       		.uleb128 0x34
 797 00e8 00       		.byte	0
 798 00e9 03       		.uleb128 0x3
 799 00ea 08       		.uleb128 0x8
 800 00eb 3A       		.uleb128 0x3a
 801 00ec 0B       		.uleb128 0xb
 802 00ed 3B       		.uleb128 0x3b
 803 00ee 0B       		.uleb128 0xb
 804 00ef 49       		.uleb128 0x49
 805 00f0 13       		.uleb128 0x13
 806 00f1 3F       		.uleb128 0x3f
 807 00f2 0C       		.uleb128 0xc
 808 00f3 02       		.uleb128 0x2
 809 00f4 0A       		.uleb128 0xa
 810 00f5 00       		.byte	0
 811 00f6 00       		.byte	0
ARM GAS  /tmp/ccgabouO.s 			page 18


 812 00f7 00       		.byte	0
 813              		.section	.debug_loc,"",%progbits
 814              	.Ldebug_loc0:
 815              	.LLST0:
 816 0000 00000000 		.4byte	.LFB0-.Ltext0
 817 0004 04000000 		.4byte	.LCFI0-.Ltext0
 818 0008 0200     		.2byte	0x2
 819 000a 7D       		.byte	0x7d
 820 000b 00       		.sleb128 0
 821 000c 04000000 		.4byte	.LCFI0-.Ltext0
 822 0010 D0010000 		.4byte	.LFE0-.Ltext0
 823 0014 0200     		.2byte	0x2
 824 0016 7D       		.byte	0x7d
 825 0017 10       		.sleb128 16
 826 0018 00000000 		.4byte	0
 827 001c 00000000 		.4byte	0
 828              	.LLST1:
 829 0020 D0010000 		.4byte	.LFB1-.Ltext0
 830 0024 D4010000 		.4byte	.LCFI1-.Ltext0
 831 0028 0200     		.2byte	0x2
 832 002a 7D       		.byte	0x7d
 833 002b 00       		.sleb128 0
 834 002c D4010000 		.4byte	.LCFI1-.Ltext0
 835 0030 D8010000 		.4byte	.LCFI2-.Ltext0
 836 0034 0200     		.2byte	0x2
 837 0036 7D       		.byte	0x7d
 838 0037 04       		.sleb128 4
 839 0038 D8010000 		.4byte	.LCFI2-.Ltext0
 840 003c 78020000 		.4byte	.LFE1-.Ltext0
 841 0040 0200     		.2byte	0x2
 842 0042 7D       		.byte	0x7d
 843 0043 10       		.sleb128 16
 844 0044 00000000 		.4byte	0
 845 0048 00000000 		.4byte	0
 846              	.LLST2:
 847 004c 78020000 		.4byte	.LFB2-.Ltext0
 848 0050 7C020000 		.4byte	.LCFI3-.Ltext0
 849 0054 0200     		.2byte	0x2
 850 0056 7D       		.byte	0x7d
 851 0057 00       		.sleb128 0
 852 0058 7C020000 		.4byte	.LCFI3-.Ltext0
 853 005c 34030000 		.4byte	.LFE2-.Ltext0
 854 0060 0200     		.2byte	0x2
 855 0062 7D       		.byte	0x7d
 856 0063 08       		.sleb128 8
 857 0064 00000000 		.4byte	0
 858 0068 00000000 		.4byte	0
 859              		.section	.debug_aranges,"",%progbits
 860 0000 1C000000 		.4byte	0x1c
 861 0004 0200     		.2byte	0x2
 862 0006 00000000 		.4byte	.Ldebug_info0
 863 000a 04       		.byte	0x4
 864 000b 00       		.byte	0
 865 000c 0000     		.2byte	0
 866 000e 0000     		.2byte	0
 867 0010 00000000 		.4byte	.Ltext0
 868 0014 34030000 		.4byte	.Letext0-.Ltext0
ARM GAS  /tmp/ccgabouO.s 			page 19


 869 0018 00000000 		.4byte	0
 870 001c 00000000 		.4byte	0
 871              		.section	.debug_line,"",%progbits
 872              	.Ldebug_line0:
 873 0000 87000000 		.section	.debug_str,"MS",%progbits,1
 873      02003D00 
 873      00000201 
 873      FB0E0D00 
 873      01010101 
 874              	.LASF9:
 875 0000 73746163 		.ascii	"stackTwoSP\000"
 875      6B54776F 
 875      535000
 876              	.LASF17:
 877 000b 73746B70 		.ascii	"stkptr\000"
 877      747200
 878              	.LASF14:
 879 0012 2F686F6D 		.ascii	"/home/jun/projects/critical_section\000"
 879      652F6A75 
 879      6E2F7072 
 879      6F6A6563 
 879      74732F63 
 880              	.LASF8:
 881 0036 73746163 		.ascii	"stackOneSP\000"
 881      6B4F6E65 
 881      535000
 882              	.LASF0:
 883 0041 6C6F6E67 		.ascii	"long unsigned int\000"
 883      20756E73 
 883      69676E65 
 883      6420696E 
 883      7400
 884              	.LASF13:
 885 0053 7372632F 		.ascii	"src/main.c\000"
 885      6D61696E 
 885      2E6300
 886              	.LASF15:
 887 005e 43726974 		.ascii	"CriticalSection_t\000"
 887      6963616C 
 887      53656374 
 887      696F6E5F 
 887      7400
 888              	.LASF11:
 889 0070 7461736B 		.ascii	"taskID\000"
 889      494400
 890              	.LASF18:
 891 0077 73636865 		.ascii	"scheduler\000"
 891      64756C65 
 891      7200
 892              	.LASF1:
 893 0081 756E7369 		.ascii	"unsigned char\000"
 893      676E6564 
 893      20636861 
 893      7200
 894              	.LASF12:
 895 008f 474E5520 		.ascii	"GNU C 4.8.4 20140725 (release) [ARM/embedded-4_8-br"
 895      4320342E 
ARM GAS  /tmp/ccgabouO.s 			page 20


 895      382E3420 
 895      32303134 
 895      30373235 
 896 00c2 616E6368 		.ascii	"anch revision 213147] -mcpu=arm7tdmi -marm -gdwarf-"
 896      20726576 
 896      6973696F 
 896      6E203231 
 896      33313437 
 897 00f5 32202D4F 		.ascii	"2 -O0 -fomit-frame-pointer\000"
 897      30202D66 
 897      6F6D6974 
 897      2D667261 
 897      6D652D70 
 898              	.LASF19:
 899 0110 6D61696E 		.ascii	"main\000"
 899      00
 900              	.LASF4:
 901 0115 7461736B 		.ascii	"task_address\000"
 901      5F616464 
 901      72657373 
 901      00
 902              	.LASF2:
 903 0122 73686F72 		.ascii	"short unsigned int\000"
 903      7420756E 
 903      7369676E 
 903      65642069 
 903      6E7400
 904              	.LASF3:
 905 0135 73746163 		.ascii	"stack\000"
 905      6B00
 906              	.LASF7:
 907 013b 73746163 		.ascii	"stackTwo\000"
 907      6B54776F 
 907      00
 908              	.LASF16:
 909 0144 696E6974 		.ascii	"initialize_stack\000"
 909      69616C69 
 909      7A655F73 
 909      7461636B 
 909      00
 910              	.LASF6:
 911 0155 73746163 		.ascii	"stackOne\000"
 911      6B4F6E65 
 911      00
 912              	.LASF10:
 913 015e 63757272 		.ascii	"currentSP\000"
 913      656E7453 
 913      5000
 914              	.LASF5:
 915 0168 73697A65 		.ascii	"sizetype\000"
 915      74797065 
 915      00
 916              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140725 (release) [ARM/embedded-4_8-br
ARM GAS  /tmp/ccgabouO.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000400 stackOne
                            *COM*:00000400 stackTwo
                            *COM*:00000004 cs
                            *COM*:00000004 stackOneSP
                            *COM*:00000004 stackTwoSP
                            *COM*:00000004 currentSP
                            *COM*:00000004 taskID
     /tmp/ccgabouO.s:55     .text:00000000 $a
     /tmp/ccgabouO.s:58     .text:00000000 initialize_stack
     /tmp/ccgabouO.s:195    .text:0000019c $d
     /tmp/ccgabouO.s:212    .rodata:00000000 $d
     /tmp/ccgabouO.s:216    .text:000001d0 $a
     /tmp/ccgabouO.s:219    .text:000001d0 scheduler
     /tmp/ccgabouO.s:283    .text:00000260 $d
     /tmp/ccgabouO.s:301    .text:00000278 $a
     /tmp/ccgabouO.s:304    .text:00000278 main
     /tmp/ccgabouO.s:367    .text:00000308 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
printString
initHardware
CreateCriticalSection
initialize_timer_tick
switch_to_current
DeleteCriticalSection
taskOne
taskTwo
